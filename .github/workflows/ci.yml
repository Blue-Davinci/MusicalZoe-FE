name: Continuous Integration & Deployment

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]

permissions:
  contents: read
  id-token: write

env:
  NODE_VERSION: '20'
  ARTIFACT_NAME: musical-zoe-frontend

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    outputs:
      build-version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create test environment
        run: |
          cat > .env << EOF
          API_BASE_URL=https://api.test.com/v1
          API_SIGNUP_URL=https://api.test.com/v1/api
          API_ACTIVATION_URL=https://api.test.com/v1/api/activated
          API_AUTHENTICATION_URL=https://api.test.com/v1/api/authentication
          MUSIC_API_NEWS_URL=https://api.test.com/v1/musical/news
          MUSIC_API_TRENDS_URL=https://api.test.com/v1/musical/trends
          MUSIC_API_LYRICS_URL=https://api.test.com/v1/musical/lyrics
          MUSIC_API_TRACK_INFO_URL=https://api.test.com/v1/musical/track-info
          MUSIC_API_HEALTH_URL=https://api.test.com/v1/health
          APP_NAME="Musical Zoe"
          APP_VERSION="1.0.0"
          APP_ENV="test"
          VITE_API_BASE_URL=https://api.test.com/v1
          VITE_API_SIGNUP_URL=https://api.test.com/v1/api
          VITE_API_ACTIVATION_URL=https://api.test.com/v1/api/activated
          VITE_API_AUTHENTICATION_URL=https://api.test.com/v1/api/authentication
          VITE_MUSIC_API_NEWS_URL=https://api.test.com/v1/musical/news
          VITE_MUSIC_API_TRENDS_URL=https://api.test.com/v1/musical/trends
          VITE_MUSIC_API_LYRICS_URL=https://api.test.com/v1/musical/lyrics
          VITE_MUSIC_API_TRACK_INFO_URL=https://api.test.com/v1/musical/track-info
          VITE_MUSIC_API_HEALTH_URL=https://api.test.com/v1/health
          VITE_APP_NAME="Musical Zoe"
          VITE_APP_VERSION="1.0.0"
          VITE_APP_ENV="test"
          EOF

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run check

      - name: Run tests
        run: npm test

      - name: Build application
        run: npm run build

      - name: Run security audit
        run: npm audit --audit-level high
        continue-on-error: true

      - name: Generate build version
        id: version
        run: |
          VERSION=$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA::8}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Build version: ${VERSION}"

      - name: Create deployment artifact
        if: github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.base_ref == 'main')
        run: |
          # Create deployment directory structure
          mkdir -p deployment

          # Copy build output
          cp -r build deployment/

          # Create deployment metadata
          cat > deployment/deployment-info.json << EOF
          {
            "version": "${{ steps.version.outputs.version }}",
            "build_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit_sha": "${GITHUB_SHA}",
            "branch": "${GITHUB_REF_NAME}",
            "environment": "production"
          }
          EOF

          # Create deployment archive
          cd deployment
          zip -r ../${{ env.ARTIFACT_NAME }}-${{ steps.version.outputs.version }}.zip .
          cd ..

          # Verify archive contents
          echo "Archive contents:"
          unzip -l ${{ env.ARTIFACT_NAME }}-${{ steps.version.outputs.version }}.zip

      - name: Upload build artifact
        if: github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.base_ref == 'main')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}-${{ steps.version.outputs.version }}
          path: ${{ env.ARTIFACT_NAME }}-${{ steps.version.outputs.version }}.zip
          retention-days: 30

  deploy:
    name: Deploy to Production
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.base_ref == 'main')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}-${{ needs.test.outputs.build-version }}
          path: .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload artifact to S3
        run: |
          ARTIFACT_KEY="deployments/${{ env.ARTIFACT_NAME }}-${{ needs.test.outputs.build-version }}.zip"

          echo "Uploading to S3..."
          aws s3 cp ${{ env.ARTIFACT_NAME }}-${{ needs.test.outputs.build-version }}.zip \
            s3://${{ secrets.S3_BUCKET_NAME }}/${ARTIFACT_KEY} \
            --metadata "version=${{ needs.test.outputs.build-version }},commit=${{ github.sha }},branch=${{ github.ref_name }}"

          echo "Artifact uploaded to s3://${{ secrets.S3_BUCKET_NAME }}/${ARTIFACT_KEY}"

      - name: Trigger deployment via SSM
        id: trigger-deployment
        env:
          ASG_NAME: ${{ secrets.ASG_NAME }}
          DESTINATION_PATH: ${{ secrets.DESTINATION_PATH }}
        run: |
          echo "Starting deployment automation..."

          # Build parameters for SSM document
          ARTIFACT_KEY="deployments/${{ env.ARTIFACT_NAME }}-${{ needs.test.outputs.build-version }}.zip"

          echo "SSM Parameters:"
          echo "  AutoScalingGroupName: ${ASG_NAME}"
          echo "  S3Bucket: ${{ secrets.S3_BUCKET_NAME }}"
          echo "  ArtifactKey: ${ARTIFACT_KEY}"
          echo "  DestinationPath: ${DESTINATION_PATH:-/usr/share/nginx/html}"
          echo "  Version: ${{ needs.test.outputs.build-version }}"
          echo "  Environment: production"
          echo "  AutomationAssumeRole: ${{ secrets.AWS_ROLE_ARN }}"

          EXECUTION_ID=$(aws ssm start-automation-execution \
            --document-name "${{ secrets.SSM_DOCUMENT_NAME }}" \
            --parameters \
              "AutoScalingGroupName=${ASG_NAME}" \
              "S3Bucket=${{ secrets.S3_BUCKET_NAME }}" \
              "ArtifactKey=${ARTIFACT_KEY}" \
              "DestinationPath=${DESTINATION_PATH:-/usr/share/nginx/html}" \
              "Version=${{ needs.test.outputs.build-version }}" \
              "Environment=production" \
              "AutomationAssumeRole=${{ secrets.AWS_ROLE_ARN }}" \
            --query 'AutomationExecutionId' \
            --output text)

          echo "Deployment automation started with ID: ${EXECUTION_ID}"
          echo "execution-id=${EXECUTION_ID}" >> $GITHUB_OUTPUT

      - name: Wait for deployment completion
        run: |
          echo "Monitoring deployment progress..."

          # Wait for deployment to complete (max 10 minutes)
          timeout 600 bash -c '
            while true; do
              STATUS=$(aws ssm describe-automation-executions \
                --filters "Key=ExecutionId,Values=${{ steps.trigger-deployment.outputs.execution-id }}" \
                --query "AutomationExecutions[0].AutomationExecutionStatus" \
                --output text)
              
              echo "Deployment status: ${STATUS}"
              
              case "${STATUS}" in
                "Success")
                  echo "Deployment completed successfully!"
                  exit 0
                  ;;
                "Failed"|"Cancelled"|"TimedOut")
                  echo "Deployment failed with status: ${STATUS}"
                  exit 1
                  ;;
                "InProgress")
                  echo "Deployment in progress..."
                  sleep 30
                  ;;
                *)
                  echo "Unknown status: ${STATUS}"
                  sleep 30
                  ;;
              esac
            done
          '

      - name: Deployment summary
        if: always()
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.test.outputs.build-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Bucket**: ${{ secrets.S3_BUCKET_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifact**: deployments/${{ env.ARTIFACT_NAME }}-${{ needs.test.outputs.build-version }}.zip" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
