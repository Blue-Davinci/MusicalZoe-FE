name: Dependency Management

on:
  schedule:
    # Run every Monday at 8 AM UTC
    - cron: '0 8 * * 1'
  workflow_dispatch: # Allow manual trigger

jobs:
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run comprehensive security audit
        run: |
          echo "🔍 Running comprehensive dependency security audit..."
          
          # Run npm audit and capture output
          npm audit --json > audit-results.json || true
          
          # Parse results
          HIGH_VULNS=$(cat audit-results.json | jq '.vulnerabilities | to_entries[] | select(.value.severity == "high") | length' | wc -l)
          CRITICAL_VULNS=$(cat audit-results.json | jq '.vulnerabilities | to_entries[] | select(.value.severity == "critical") | length' | wc -l)
          MODERATE_VULNS=$(cat audit-results.json | jq '.vulnerabilities | to_entries[] | select(.value.severity == "moderate") | length' | wc -l)
          
          echo "Critical vulnerabilities: $CRITICAL_VULNS"
          echo "High vulnerabilities: $HIGH_VULNS"
          echo "Moderate vulnerabilities: $MODERATE_VULNS"
          
          # Fail if critical or high vulnerabilities found
          if [ "$CRITICAL_VULNS" -gt 0 ] || [ "$HIGH_VULNS" -gt 0 ]; then
            echo "❌ Critical or high severity vulnerabilities found!"
            npm audit
            exit 1
          else
            echo "✅ No critical or high severity vulnerabilities found"
          fi

      - name: Check for outdated dependencies
        run: |
          echo "📦 Checking for outdated dependencies..."
          npm outdated || true
          
          # Generate update recommendations
          echo "### Dependency Update Report" > dependency-report.md
          echo "Generated on: $(date)" >> dependency-report.md
          echo "" >> dependency-report.md
          
          # Check specific SvelteKit ecosystem packages
          echo "#### SvelteKit Ecosystem:" >> dependency-report.md
          npm list @sveltejs/kit @sveltejs/adapter-auto svelte >> dependency-report.md 2>&1 || true
          echo "" >> dependency-report.md
          
          echo "#### Development Tools:" >> dependency-report.md
          npm list typescript eslint prettier tailwindcss >> dependency-report.md 2>&1 || true
          echo "" >> dependency-report.md
          
          echo "#### Testing Framework:" >> dependency-report.md
          npm list vitest @testing-library/svelte >> dependency-report.md 2>&1 || true

      - name: License compliance check
        run: |
          echo "⚖️  Checking license compliance..."
          
          # Install license checker
          npx license-checker --summary --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD' || echo "License check completed with warnings"
          
          # Generate license report
          echo "### License Report" >> dependency-report.md
          echo "" >> dependency-report.md
          npx license-checker --csv >> dependency-report.md || echo "License report generated"

      - name: Bundle impact analysis
        run: |
          echo "📊 Analyzing bundle impact of dependencies..."
          
          # Create environment file for build
          cat > .env << EOF
          VITE_API_BASE_URL=https://api.test.com/v1
          VITE_API_SIGNUP_URL=https://api.test.com/v1/api
          VITE_API_ACTIVATION_URL=https://api.test.com/v1/api/activated
          VITE_API_AUTHENTICATION_URL=https://api.test.com/v1/api/authentication
          VITE_MUSIC_API_NEWS_URL=https://api.test.com/v1/musical/news
          VITE_MUSIC_API_TRENDS_URL=https://api.test.com/v1/musical/trends
          VITE_MUSIC_API_LYRICS_URL=https://api.test.com/v1/musical/lyrics
          VITE_MUSIC_API_TRACK_INFO_URL=https://api.test.com/v1/musical/track-info
          VITE_MUSIC_API_HEALTH_URL=https://api.test.com/v1/health
          VITE_APP_NAME="Musical Zoe"
          VITE_APP_VERSION="1.0.0"
          VITE_APP_ENV="test"
          EOF
          
          # Build the project to analyze bundle
          npm run build
          
          # Check bundle size
          BUILD_SIZE=$(du -sh build/ | cut -f1)
          echo "Current build size: $BUILD_SIZE"
          
          echo "### Bundle Analysis" >> dependency-report.md
          echo "Current build size: $BUILD_SIZE" >> dependency-report.md
          echo "" >> dependency-report.md
          
          # List largest files
          echo "#### Largest build files:" >> dependency-report.md
          find build -type f \( -name "*.js" -o -name "*.css" \) -exec ls -lh {} + | sort -k5 -hr | head -10 >> dependency-report.md

      - name: Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report
          path: dependency-report.md
          retention-days: 30

  package-updates:
    name: Safe Package Updates
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Update patch versions safely
        id: update_check
        run: |
          echo "🔄 Updating patch versions..."
          
          # Update only patch versions (safer updates)
          npm update --save
          
          # Check if package-lock.json was modified
          if git diff --quiet package-lock.json; then
            echo "No updates available"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          else
            echo "Updates found"
            echo "has_updates=true" >> $GITHUB_OUTPUT
          fi

      - name: Test updated dependencies
        if: steps.update_check.outputs.has_updates == 'true'
        run: |
          echo "🧪 Testing with updated dependencies..."
          
          # Create environment file for build
          cat > .env << EOF
          VITE_API_BASE_URL=https://api.test.com/v1
          VITE_API_SIGNUP_URL=https://api.test.com/v1/api
          VITE_API_ACTIVATION_URL=https://api.test.com/v1/api/activated
          VITE_API_AUTHENTICATION_URL=https://api.test.com/v1/api/authentication
          VITE_MUSIC_API_NEWS_URL=https://api.test.com/v1/musical/news
          VITE_MUSIC_API_TRENDS_URL=https://api.test.com/v1/musical/trends
          VITE_MUSIC_API_LYRICS_URL=https://api.test.com/v1/musical/lyrics
          VITE_MUSIC_API_TRACK_INFO_URL=https://api.test.com/v1/musical/track-info
          VITE_MUSIC_API_HEALTH_URL=https://api.test.com/v1/health
          VITE_APP_NAME="Musical Zoe"
          VITE_APP_VERSION="1.0.0"
          VITE_APP_ENV="test"
          EOF
          
          # Run comprehensive tests
          npm run check
          npm run lint
          npm run test
          npm run build
          
          echo "✅ All tests passed with updated dependencies"

      - name: Create pull request for updates
        if: steps.update_check.outputs.has_updates == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies (patch versions)'
          title: '🔄 Automated Dependency Updates'
          body: |
            ## Automated Dependency Updates
            
            This PR contains safe patch-level dependency updates.
            
            ### Changes
            - Updated patch versions of dependencies
            - All tests pass with updated dependencies
            - Security audit passed
            
            ### Verification
            - ✅ TypeScript compilation
            - ✅ ESLint checks
            - ✅ Prettier formatting
            - ✅ Unit tests
            - ✅ Build process
            - ✅ Security audit
            
            This PR was automatically generated by the dependency management workflow.
          branch: automated-dependency-updates
          delete-branch: true

  security-advisory:
    name: Security Advisory Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Check for security advisories
        run: |
          echo "🛡️  Checking for security advisories..."
          
          # Check npm security advisories
          npm audit --audit-level moderate --json > security-report.json || true
          
          # Generate security summary
          echo "### Security Advisory Report" > security-summary.md
          echo "Generated on: $(date)" >> security-summary.md
          echo "" >> security-summary.md
          
          # Parse and summarize vulnerabilities
          if [ -s security-report.json ]; then
            TOTAL_VULNS=$(cat security-report.json | jq '.metadata.vulnerabilities.total // 0')
            echo "Total vulnerabilities found: $TOTAL_VULNS" >> security-summary.md
            
            if [ "$TOTAL_VULNS" -gt 0 ]; then
              echo "" >> security-summary.md
              echo "#### Recommended Actions:" >> security-summary.md
              echo "1. Run \`npm audit fix\` to automatically fix issues" >> security-summary.md
              echo "2. Review any remaining vulnerabilities manually" >> security-summary.md
              echo "3. Consider upgrading affected packages" >> security-summary.md
            else
              echo "✅ No security vulnerabilities found" >> security-summary.md
            fi
          else
            echo "✅ No security vulnerabilities found" >> security-summary.md
          fi

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 90
