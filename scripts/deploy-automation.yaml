# Musical Zoe - SSM Automation Document
# This document automates the deployment of the Musical Zoe frontend application

schemaVersion: '0.3'
description: 'Deploy Musical Zoe Frontend Application from S3 to EC2 instances'
assumeRole: '{{ AutomationAssumeRole }}'

parameters:
  S3Bucket:
    type: String
    description: 'S3 bucket containing the deployment artifact'
  
  ArtifactKey:
    type: String
    description: 'S3 key for the deployment artifact'
  
  Version:
    type: String
    description: 'Version identifier for this deployment'
  
  Environment:
    type: String
    description: 'Target environment (production, staging, development)'
    default: 'production'
  
  AutoScalingGroupName:
    type: String
    description: 'Auto Scaling Group name containing target EC2 instances'
    default: 'musical-zoe-asg'
  
  DestinationPath:
    type: String
    description: 'Target directory on EC2 instances'
    default: '/opt/musicalzoe'
  
  AutomationAssumeRole:
    type: String
    description: 'IAM role for automation execution'
    default: 'arn:aws:iam::{{global:ACCOUNT_ID}}:role/SSMAutomationRole'

mainSteps:
  - name: GetInstancesFromASG
    action: 'aws:executeAwsApi'
    description: 'Get EC2 instances from Auto Scaling Group'
    inputs:
      Service: autoscaling
      Api: DescribeAutoScalingGroups
      AutoScalingGroupNames:
        - '{{ AutoScalingGroupName }}'
    outputs:
      - Name: InstanceIds
        Selector: '$.AutoScalingGroups[0].Instances[?@.LifecycleState==`InService`].InstanceId'
        Type: StringList

  - name: CreateBackup
    action: 'aws:runCommand'
    description: 'Create backup of current deployment'
    inputs:
      DocumentName: 'AWS-RunShellScript'
      InstanceIds: '{{ GetInstancesFromASG.InstanceIds }}'
      Parameters:
        commands:
          - |
            #!/bin/bash
            set -e
            
            BACKUP_DIR="{{ DestinationPath }}/backups"
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            
            # Create backup directory
            sudo mkdir -p "${BACKUP_DIR}"
            
            # Backup current application if it exists
            if [ -d "{{ DestinationPath }}/app" ]; then
              echo "Creating backup of current application..."
              sudo tar -czf "${BACKUP_DIR}/backup-${TIMESTAMP}.tar.gz" \
                -C "{{ DestinationPath }}" app
              echo "Backup created: ${BACKUP_DIR}/backup-${TIMESTAMP}.tar.gz"
            else
              echo "No existing application found to backup"
            fi
            
            # Keep only last 5 backups
            sudo find "${BACKUP_DIR}" -name "backup-*.tar.gz" -type f | \
              sort -r | tail -n +6 | xargs -r sudo rm -f
            
            echo "Backup completed successfully"

  - name: DownloadArtifact
    action: 'aws:runCommand'
    description: 'Download deployment artifact from S3'
    inputs:
      DocumentName: 'AWS-RunShellScript'
      InstanceIds: '{{ GetInstancesFromASG.InstanceIds }}'
      Parameters:
        commands:
          - |
            #!/bin/bash
            set -e
            
            TEMP_DIR="/tmp/musical-zoe-deploy"
            ARTIFACT_PATH="${TEMP_DIR}/{{ ArtifactKey | basename }}"
            
            # Clean and create temp directory
            sudo rm -rf "${TEMP_DIR}"
            sudo mkdir -p "${TEMP_DIR}"
            
            # Download artifact from S3
            echo "Downloading deployment artifact..."
            aws s3 cp "s3://{{ S3Bucket }}/{{ ArtifactKey }}" "${ARTIFACT_PATH}"
            
            # Verify download
            if [ ! -f "${ARTIFACT_PATH}" ]; then
              echo "Error: Failed to download artifact"
              exit 1
            fi
            
            echo "Artifact downloaded successfully: ${ARTIFACT_PATH}"
            ls -la "${ARTIFACT_PATH}"

  - name: StopApplication
    action: 'aws:runCommand'
    description: 'Stop the current application'
    inputs:
      DocumentName: 'AWS-RunShellScript'
      InstanceIds: '{{ GetInstancesFromASG.InstanceIds }}'
      Parameters:
        commands:
          - |
            #!/bin/bash
            set -e
            
            echo "Stopping Musical Zoe application..."
            
            # Stop PM2 processes
            sudo -u musicalzoe pm2 stop all || echo "No PM2 processes to stop"
            
            # Stop nginx (gracefully)
            sudo nginx -s quit || sudo systemctl stop nginx || echo "Nginx already stopped"
            
            echo "Application stopped successfully"

  - name: DeployApplication
    action: 'aws:runCommand'
    description: 'Deploy the new application version'
    inputs:
      DocumentName: 'AWS-RunShellScript'
      InstanceIds: '{{ GetInstancesFromASG.InstanceIds }}'
      Parameters:
        commands:
          - |
            #!/bin/bash
            set -e
            
            TEMP_DIR="/tmp/musical-zoe-deploy"
            ARTIFACT_PATH="${TEMP_DIR}/{{ ArtifactKey | basename }}"
            APP_DIR="{{ DestinationPath }}/app"
            
            # Create application directory
            sudo mkdir -p "${APP_DIR}"
            
            # Extract artifact
            echo "Extracting deployment artifact..."
            cd "${TEMP_DIR}"
            sudo unzip -o "${ARTIFACT_PATH}"
            
            # Copy application files
            echo "Deploying application files..."
            sudo rm -rf "${APP_DIR}"/*
            sudo cp -r build/* "${APP_DIR}/"
            
            # Update deployment info
            if [ -f "deployment-info.json" ]; then
              sudo cp deployment-info.json "${APP_DIR}/"
            fi
            
            # Set proper ownership and permissions
            sudo chown -R musicalzoe:musicalzoe "${APP_DIR}"
            sudo chmod -R 755 "${APP_DIR}"
            
            # Create PM2 ecosystem file
            sudo tee {{ DestinationPath }}/ecosystem.config.js > /dev/null << 'EOF'
            module.exports = {
              apps: [{
                name: 'musical-zoe',
                script: '{{ DestinationPath }}/app/index.js',
                cwd: '{{ DestinationPath }}/app',
                instances: 'max',
                exec_mode: 'cluster',
                env: {
                  NODE_ENV: '{{ Environment }}',
                  PORT: 3000,
                  HOST: '127.0.0.1'
                },
                log_file: '{{ DestinationPath }}/logs/combined.log',
                out_file: '{{ DestinationPath }}/logs/out.log',
                error_file: '{{ DestinationPath }}/logs/error.log',
                log_date_format: 'YYYY-MM-DD HH:mm:ss Z',
                merge_logs: true,
                max_restarts: 10,
                min_uptime: '10s'
              }]
            };
            EOF
            
            sudo chown musicalzoe:musicalzoe {{ DestinationPath }}/ecosystem.config.js
            
            echo "Application deployed successfully"

  - name: StartApplication
    action: 'aws:runCommand'
    description: 'Start the deployed application'
    inputs:
      DocumentName: 'AWS-RunShellScript'
      InstanceIds: '{{ GetInstancesFromASG.InstanceIds }}'
      Parameters:
        commands:
          - |
            #!/bin/bash
            set -e
            
            # Start PM2 with the new application
            echo "Starting Musical Zoe application..."
            sudo -u musicalzoe pm2 start {{ DestinationPath }}/ecosystem.config.js
            
            # Save PM2 process list
            sudo -u musicalzoe pm2 save
            
            # Wait for application to start
            sleep 10
            
            # Start nginx
            echo "Starting nginx..."
            sudo systemctl start nginx
            
            echo "Application started successfully"

  - name: HealthCheck
    action: 'aws:runCommand'
    description: 'Verify application health'
    inputs:
      DocumentName: 'AWS-RunShellScript'
      InstanceIds: '{{ GetInstancesFromASG.InstanceIds }}'
      Parameters:
        commands:
          - |
            #!/bin/bash
            set -e
            
            echo "Performing health check..."
            
            # Check PM2 status
            sudo -u musicalzoe pm2 status
            
            # Check nginx status
            sudo systemctl status nginx --no-pager
            
            # Test application endpoints
            max_attempts=30
            attempt=0
            
            while [ $attempt -lt $max_attempts ]; do
              if curl -f -s http://localhost:3000/health > /dev/null 2>&1; then
                echo "✅ Application health check passed"
                break
              else
                echo "⏳ Health check attempt $((attempt + 1))/$max_attempts failed, retrying..."
                sleep 5
                ((attempt++))
              fi
            done
            
            if [ $attempt -eq $max_attempts ]; then
              echo "❌ Health check failed after $max_attempts attempts"
              exit 1
            fi
            
            echo "Deployment completed successfully!"

  - name: Cleanup
    action: 'aws:runCommand'
    description: 'Clean up temporary files'
    inputs:
      DocumentName: 'AWS-RunShellScript'
      InstanceIds: '{{ GetInstancesFromASG.InstanceIds }}'
      Parameters:
        commands:
          - |
            #!/bin/bash
            
            # Clean up temp directory
            sudo rm -rf /tmp/musical-zoe-deploy
            
            echo "Cleanup completed"

outputs:
  - DeploymentVersion:
      Type: String
      Value: '{{ Version }}'
  - InstanceIds:
      Type: StringList
      Value: '{{ GetInstancesFromASG.InstanceIds }}'
  - Environment:
      Type: String
      Value: '{{ Environment }}'
